@model string
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Affilites";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    body{
        color:azure !important;
    }
    .treeview span.node-icon {
        margin-right: 30px !important;
    }

        .treeview span.node-icon::before {
            content: "" !important;
            height: 1px;
            width: 18px;
            background-color: #ebd181;
            position: absolute;
            top: 5px;
            bottom: 5px;
            left: auto;
            margin: auto;
        }

        .treeview span.node-icon::after {
            content: "" !important;
            width: 1px;
            height: 100%;
            background-color: #ebd181;
            position: absolute;
            top: -11px;
            bottom: 0;
            left: auto;
            min-height: 15px;
            margin-left: -7px;
        }

    #tree > ul > li {
        text-align: left;
        background: #2a2a2a;
    }

    .list-group-item {
        position: relative;
        display: block;
        padding: 10px 15px;
        margin-bottom: -1px;
        background-color: #2a2a2a;
        border: none !important;
        color: white
    }

    .me_aligns {
        float: right !important;
    }

    #navbar {
        min-height: 0px !important;
    }

    @@media (max-width:1024px) {
        .me_aligns {
            width: 100%;
            float: left !important;
        }
    }
    /*Css treeview*/

    /* ul.list-group {
        list-style: none;
        border-left: 1px dashed black;
        white-space: nowrap;
        margin-right: 4px;
        padding-left: 20px;
    }*/
    .indent {
        list-style: none !important;
        border-left: 1px dashed white !important;
        white-space: nowrap !important;
        margin-right: 4px !important;
        padding-left: 10px !important;
        padding-top: 25px !important;
    }
    /*    .list-group-item {
        list-style: none !important;
        border-left: 1px dashed white !important;
        white-space: nowrap !important;
        margin-right: 4px !important;
        padding-left: 20px !important;
    }*/
</style>

@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.9.1/underscore-min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-treeview/1.2.0/bootstrap-treeview.min.css" />
    @*<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />*@
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.1/knockout-min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-treeview/1.2.0/bootstrap-treeview.min.js"></script>
    <script>

//aLong copy affiliate url
        //var copyTextareaBtn = document.querySelector('#urlAffiliate');

        //copyTextareaBtn.addEventListener('click', function (event) {
        //    var copy_text = this;
        //    var range = document.createRange();
        //    range.selectNode(copy_text);
        //    window.getSelection().addRange(range);

        //    try {
        //        var successful = document.execCommand('copy');
        //        var msg = successful ? 'successful' : 'unsuccessful';
        //        alert("Copied: " + range);
        //        console.log('Copying text command was ' + msg);
        //    } catch (err) {
        //        console.log('Oops, unable to copy');
        //    }
        //});

        // Example usage
        var arr = @(Html.Raw(Model.ToString()));
        console.log(@(Html.Raw(Model.ToString())));
        unflatten = function (array, parent, tree) {
            tree = typeof tree !== 'undefined' ? tree : [];
            parent = typeof parent !== 'undefined' ? parent : { id: 0 };

            var nodes = _.filter(array, function (child) { return child.nodeLevel == parent.id; });

            if (!_.isEmpty(nodes)) {
                if (parent.id == 0) {
                    tree = nodes;
                } else {
                    parent['nodes'] = nodes
                }
                _.each(nodes, function (child) { unflatten(array, child) });
            }

            return tree;
        }

        tree = unflatten(arr);
        console.log(tree);
       //document.body.innerHTML = "<pre>" + (JSON.stringify(tree, null, " "))

        /* globals Tree */
        'use strict';
        // Dummy function that will end up being an API call.
        function getTree() {
            // Some logic to retrieve, or generate tree structure
            return tree;
            //[{
            //    text: "Root Folder",
            //    nodeLevel: 0,
            //    selectable: false,
            //    nodes: [{
            //        text: "Folder 1yyyy",
            //        nodeLevel: 10,
            //        nodes: [{
            //            nodeLevel: 2,
            //            text: "File 1",
            //            data: "This isToString diplay for File 1"
            //        }, {
            //            nodeLevel: 2,
            //            text: "File 2",
            //            data: "This is data to diplay for File 2"
            //        }]
            //    }, {
            //        nodeLevel: 1,
            //        text: "Folder 2"
            //    }]
            //}, {
            //    nodeLevel: 1,
            //    text: "Folder 3"
            //}, {
            //    nodeLevel: 1,
            //    text: "Folder 4"
            //}];
        }
        // Create the View Model.
        var ViewModel = function (jsonData) {
            var self = this;
            self.MyData = ko.observable(jsonData);

            ko.computed(function () {
                $('#tree').treeview({
                    data: self.MyData()
                })
                    .on('nodeSelected', function (event, data) {

                    });
            })
        }
        // Create the View Model and initialise with initial data
        var vm = new ViewModel(getTree());
        // Bind.
        ko.applyBindings(vm, document.getElementById("bindSection"));

        //Mr.Nghia code button copy
        function FunctionCopyLink() {
            var copyTextareaBtn = document.querySelector('#urlAffiliate');
            var copy_text = copyTextareaBtn;
            var range = document.createRange();
            range.selectNode(copy_text);
            window.getSelection().addRange(range);

            try {
                document.execCommand('copy');
                alert("Copied: " + range);
               // console.log('Copying text command was ' + msg);
            } catch (err) {
                console.log('Oops, unable to copy');
            }
        };
    </script>
}
<div id="using_json_2"></div>
<!-- breadcrumb begin -->
<div class="breadcrumb-miscoo">
    <div class="breadcrumb-img">
        <img src="/Content/caseno/img/breadcrumb.png" alt="">
        <img src="/Content/caseno/img/breadcrumb.png" alt="">
        <img src="/Content/caseno/img/breadcrumb.png" alt="">
        <img src="/Content/caseno/img/breadcrumb.png" alt="">
    </div>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-xl-6 col-lg-6">
                <div class="breadcrumb-content">
                    <h2  class="title" >My Affiliates</h2>
                    @*<input id="urlAffiliateInput" type="text" value="@ViewBag.linkURL" placeholder="Input pin code" style="background-color:yellow;">*@
                    <p>You can copy this link to register via this Link <a href="javascript:void(0)" id="urlAffiliate" style="color:white">@ViewBag.linkURL</a><button class="btn btn-warning" onclick="FunctionCopyLink()">Copy</button></p>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.Partial("_treePartialView")



